BatchedHeteroDataBatch(
  question_emb=[16, 1536],
  answer_emb=[16, 1536],
  label=[16, 1],
  [1mquestion[22m={
    x=[73, 1536],
    batch=[73],
    ptr=[17]
  },
  [1manswer[22m={
    x=[110, 1536],
    batch=[110],
    ptr=[17]
  },
  [1mcomment[22m={
    x=[105, 768],
    batch=[105],
    ptr=[17]
  },
  [1mtag[22m={
    x=[455, 50],
    batch=[455],
    ptr=[17]
  },
  [1mmodule[22m={
    x=[20, 30],
    batch=[20],
    ptr=[17]
  },
  [1m(tag, describes, question)[22m={ edge_index=[2, 155] },
  [1m(tag, describes, answer)[22m={ edge_index=[2, 234] },
  [1m(tag, describes, comment)[22m={ edge_index=[2, 229] },
  [1m(module, imported_in, question)[22m={ edge_index=[2, 1] },
  [1m(module, imported_in, answer)[22m={ edge_index=[2, 26] },
  [1m(question, rev_describes, tag)[22m={ edge_index=[2, 155] },
  [1m(answer, rev_describes, tag)[22m={ edge_index=[2, 234] },
  [1m(comment, rev_describes, tag)[22m={ edge_index=[2, 229] },
  [1m(question, rev_imported_in, module)[22m={ edge_index=[2, 1] },
  [1m(answer, rev_imported_in, module)[22m={ edge_index=[2, 26] }
)
DATA IN torch.Size([16, 1536]) torch.Size([16, 1536])
IN torch.Size([16, 3072])
B4 LINEAR torch.Size([16, 3392])
BatchedHeteroDataBatch(
  question_emb=[12, 1536],
  answer_emb=[12, 1536],
  label=[12, 1],
  [1mquestion[22m={
    x=[33, 1536],
    batch=[33],
    ptr=[13]
  },
  [1manswer[22m={
    x=[84, 1536],
    batch=[84],
    ptr=[13]
  },
  [1mcomment[22m={
    x=[70, 768],
    batch=[70],
    ptr=[13]
  },
  [1mtag[22m={
    x=[255, 50],
    batch=[255],
    ptr=[13]
  },
  [1mmodule[22m={
    x=[13, 30],
    batch=[13],
    ptr=[13]
  },
  [1m(tag, describes, question)[22m={ edge_index=[2, 73] },
  [1m(tag, describes, answer)[22m={ edge_index=[2, 172] },
  [1m(tag, describes, comment)[22m={ edge_index=[2, 133] },
  [1m(module, imported_in, question)[22m={ edge_index=[2, 0] },
  [1m(module, imported_in, answer)[22m={ edge_index=[2, 16] },
  [1m(question, rev_describes, tag)[22m={ edge_index=[2, 73] },
  [1m(answer, rev_describes, tag)[22m={ edge_index=[2, 172] },
  [1m(comment, rev_describes, tag)[22m={ edge_index=[2, 133] },
  [1m(question, rev_imported_in, module)[22m={ edge_index=[2, 0] },
  [1m(answer, rev_imported_in, module)[22m={ edge_index=[2, 16] }
)
DATA IN torch.Size([12, 1536]) torch.Size([12, 1536])
IN torch.Size([12, 3072])
B4 LINEAR torch.Size([12, 3392])
IN torch.Size([16, 3072])
B4 LINEAR torch.Size([16, 3392])
INFO:heterogeneous-GAT-model:[1] Loss: 0.00034426033496856687
Traceback (most recent call last):
  File "C:\Users\liamb\Documents\graph4stackoverflow\embeddings\hetero_GAT.py", line 204, in <module>
    train_acc, train_f1, train_loss, train_table = test(train_loader)
  File "C:\Users\liamb\Documents\graph4stackoverflow\embeddings\hetero_GAT.py", line 112, in test
    loss = criterion(out, data.label)  # Compute the loss.
  File "C:\Users\liamb\Documents\graph4stackoverflow\venv\lib\site-packages\torch\nn\modules\module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\liamb\Documents\graph4stackoverflow\venv\lib\site-packages\torch\nn\modules\loss.py", line 1174, in forward
    return F.cross_entropy(input, target, weight=self.weight,
  File "C:\Users\liamb\Documents\graph4stackoverflow\venv\lib\site-packages\torch\nn\functional.py", line 3026, in cross_entropy
    return torch._C._nn.cross_entropy_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index, label_smoothing)
RuntimeError: 0D or 1D target tensor expected, multi-target not supported